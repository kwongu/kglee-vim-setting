"https://agvim.wordpress.com/2017/09/05/vim-plugins-100/
"


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
scripte utf-8
" vim: set fenc=utf-8 tw=0:

" Revert all command settings before proceeding with other settings below
set all&

" Work in Vim compatible not Vi compatible
set nocompatible

" Keep 50 commands and 50 search patterns in the history.
" 50 is undo limit.
set history=100

" No need to understand this. Leave this when using Vim.
set magic

" No swap file. It's messy.
set noswapfile

" No backup file. You take your risk on your own.
set nobackup

" Turn on plugin and indent, depending on file type
filetype plugin indent on

" Wait for a key code forever.
" Wait for a mapped key sequence to complete within ttimeoutlen.
set notimeout ttimeout

" In Milliseconds
set timeoutlen=3000 ttimeoutlen=100

" Not redraw while executing macros, and commands.
set lazyredraw
set synmaxcol=128  " avoid slow rendering for long lines
syntax sync minlines=64  " faster syntax hl
syntax on 

set backspace=indent,eol,start " for backspace
"set termguicolors

set visualbell

"====================================================
"= Bundle
"====================================================
" :BundleList          - list configured bundles
" :BundleInstall(!)    - install(update) bundles
" :BundleSearch(!) foo - search(or refresh cache first) for foo
" :BundleClean(!)      - confirm(or auto-approve) removal of unused bundles
"
" see :h vundle for more details or wiki for FAQ
" NOTE: comments after Bundle command are not allowed..

set loadplugins

filetype off                   " required!

set rtp+=~/.vim/bundle/vundle
call vundle#rc()
call vundle#begin()

" let Vundle manage Vundle
" required!
Bundle 'gmarik/vundle'

"Bundle 'FuzzyFinder'
"Bundle 'fugitive.vim'
"Bundle 'DirDiff.vim'
"Bundle 'L9'
"Bundle 'LustyExplorer'
"Bundle 'rking/ag.vim'
"Bundle 'ack.vim'
"Bundle 'minibufexpl.vim'
"Bundle 'lookupfile'
"Bundle 'SuperTab-continued.'
"Bundle 'git://github.com/wesleyche/SrcExpl.git'
Bundle 'snipMate'
Bundle 'The-NERD-tree'
Bundle 'taglist.vim'
Bundle 'bufexplorer.zip'
Bundle 'SuperTab'
Bundle 'cscope_macros.vim'
Bundle 'gtags.vim'
Bundle 'OmniCppComplete'
Bundle 'armasm'
Bundle 'https://github.com/dhruvasagar/vim-table-mode.git'
"주석??기: \cc, \cn, \cs
"??른모양 주석 ??정: \ca
"주석??제: \<space>
Bundle 'The-NERD-Commenter'
Bundle 'AutoComplPop'
Bundle 'grep.vim'
Bundle 'git-file.vim'
Bundle 'Tagbar'
Bundle 'genutils'
Bundle 'Find-files'
Bundle 'vim-gitgutter'
"Bundle 'highlight.vim'
"https://medium.com/@schtoeffel/you-don-t-need-more-than-one-cursor-in-vim-2c44117d51db
"Bundle 'vim-multiple-cursors'
"Bundle 'unite.vim'
"Bundle 'ctrlp.vim'

Plugin 'inkarkat/vim-ingo-library'
Plugin 'inkarkat/vim-mark'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

"https://vim.fandom.com/wiki/Highlight_multiple_words
"Plugin 'highlights'

call vundle#end()
filetype plugin indent on     " required!


"====================================================
"= ??셈블리 ??일??C처럼 ??식??여 주석????기 ??한 ??릭
"====================================================
au BufRead,BufNewFile *.S		set ft=c

"====================================================
"= 기본 ??정
"====================================================
set cindent			"??여??기 ??정
set ruler			" ??면 ??측 ??단????재 커서????치(?????????보여준??
set number			" 줄번??출력
set cc=80			" column color 80
set modifiable
set hlsearch			" Highlight Search
set showmatch			" 일치하는 괄호 하이라팅
set ts=8			" tab stop - tab ??기
set sw=8			" shift width - shift ??기 조절
set sts=8			" soft tab stop - tab ??동 ??기
set noexpandtab
set incsearch
set printoptions=portrait:n,wrap:n,duplex:off
set fileencodings=utf-8,euc-kr
set gfn=??눔고딕코딩\ 12	" gvim????트 ??정
"colorscheme desert


"==========================
"= vim-airline
"==========================
set term=xterm-256color
set t_Co=256
let g:airline_theme="wombat"
let g:airline_powerline_fonts = 1

let g:airline#extensions#tabline#enabled = 1 " turn on buffer list

" Tab line 에 파일명만 출력되도록 설정
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline#extensions#tabline#fnamemod = ':t'


" Tab line 구분자 '|' 로 설정
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'

let g:airline_theme='hybrid'
set laststatus=2 " turn on bottom bar

"==========================
"= vim-mark
"==========================
"https://jonasjacek.github.io/colors/


let g:mwPalettes = {
\	'mypalette': [
	\   { 'ctermbg':'Cyan',         'ctermfg':'Black', 'guibg':'#8CCBEA', 'guifg':'Black' },
	\   { 'ctermbg':'Green',        'ctermfg':'Black', 'guibg':'#A4E57E', 'guifg':'Black' },
	\   { 'ctermbg':'Yellow',       'ctermfg':'Black', 'guibg':'#FFDB72', 'guifg':'Black' },
	\   { 'ctermbg':'Red',          'ctermfg':'Black', 'guibg':'#FF7272', 'guifg':'Black' },
	\   { 'ctermbg':'Magenta',      'ctermfg':'Black', 'guibg':'#FFB3FF', 'guifg':'Black' },
	\   { 'ctermbg':'Blue',         'ctermfg':'Black', 'guibg':'#9999FF', 'guifg':'Black' },
	\   { 'ctermbg':'White',        'ctermfg':'Black', 'guibg':'#FFFFFF', 'guifg':'Black' },
	\   { 'ctermbg':'DarkBlue',     'ctermfg':'Black', 'guibg':'#800000', 'guifg':'Black' },
	\   { 'ctermbg':'DarkYellow',   'ctermfg':'Black', 'guibg':'#808000', 'guifg':'Black' },
	\   { 'ctermbg':'LightCyan',    'ctermfg':'Black', 'guibg':'#FF00FF', 'guifg':'Black' },
	\   { 'ctermbg':'DarkMagenta',	'ctermfg':'Black', 'guibg':'#C0C0C0', 'guifg':'Black' },
	\   { 'ctermbg':'LightRed',	'ctermfg':'Black', 'guibg':'#C0C0C0', 'guifg':'Black' },
\	]
\}

" Make it the default:
let g:mwDefaultHighlightingPalette = 'mypalette'
"let g:mwDefaultHighlightingPalette = 'maximum'
"let g:mwDefaultHighlightingPalette = 'extended'
"let g:mwDefaultHighlightingNum = 9







"==========================
"= vim-gitgutter
"==========================

set updatetime=100
let g:gitgutter_realtime = 1
let g:gitgutter_eager = 1
let g:gitgutter_override_sign_column_highlight = 0

"highlight SignColumn ctermbg=whatever    " terminal Vim
"highlight SignColumn guibg=whatever      " gVim/MacVim

let g:gitgutter_sign_column_always = 1
let g:gitgutter_max_signs = 500  " default value

"nmap ]h <Plug>GitGutterNextHunk
"nmap [h <Plug>GitGutterPrevHunk
"nmap <Leader>ha <Plug>GitGutterStageHunk
"nmap <Leader>hr :GitGutterUndoHunk<CR>
"nmap <Leader>hv <Plug>GitGutterPreviewHunk
nmap <Leader>ht :GitGutterLineHighlightsToggle<CR>


"GitGutterAdd          " an added line
"GitGutterChange       " a changed line
"GitGutterDelete       " at least one removed line
"GitGutterChangeDelete " a changed line followed by at least one removed line

let g:gitgutter_sign_added = '+'
let g:gitgutter_sign_modified = 'm'
let g:gitgutter_sign_removed = '-'
let g:gitgutter_sign_removed_first_line = '^^'
let g:gitgutter_sign_modified_removed = 'ww'

"GitGutterAddLine          " default: links to DiffAdd
"GitGutterChangeLine       " default: links to DiffChange
"GitGutterDeleteLine       " default: links to DiffDelete
"GitGutterChangeDeleteLine " default: links to GitGutterChangeLineDefault, i.e. DiffChange

"The base of the diff
"By default buffers are diffed against the index. However you can diff against any commit by setting:
let g:gitgutter_diff_base = '<commit SHA>'

"Extra arguments for git diff
"If you want to pass extra arguments to git diff, for example to ignore whitespace, do so like this:
"let g:gitgutter_diff_args = '-w'

"Key mappings
"To disable all key mappings:
let g:gitgutter_map_keys = 1

" Default:
let g:gitgutter_grep_command = 'grep --color=never -e'

"To turn off vim-gitgutter by default
let g:gitgutter_enabled = 1
"To turn off signs by default
let g:gitgutter_signs = 1
"To turn on line highlighting by default
let g:gitgutter_highlight_lines = 0
"To turn off asynchronous updates
let g:gitgutter_async = 1




"==========================
"= autocmd
"==========================
autocmd BufEnter *.c        setlocal ts=8 sw=8 sts=8 noexpandtab
autocmd BufEnter *.cpp      setlocal ts=4 sw=4 sts=4 noexpandtab
autocmd BufEnter *.h      setlocal ts=4 sw=4 sts=4 noexpandtab
autocmd BufEnter *.S        setlocal ts=8 sw=8 sts=8 noexpandtab
autocmd BufEnter *.py       setlocal ts=4 sw=4 sts=4 expandtab
autocmd BufEnter Makefile   setlocal ts=8 sw=8 sts=8 noexpandtab
autocmd BufEnter .*         setlocal ts=8 sw=8 sts=8 noexpandtab nocindent
autocmd BufEnter *.dtsi     setlocal ts=8 sw=8 sts=8 noexpandtab nocindent
autocmd BufEnter *.dts      setlocal ts=8 sw=8 sts=8 noexpandtab nocindent
autocmd BufEnter *.md       setlocal ts=8 sw=8 sts=8 noexpandtab nocindent
autocmd BufEnter *.sh       setlocal ts=4 sw=4 sts=4 noexpandtab nocindent
autocmd BufEnter *defconfig setlocal ts=4 sw=4 sts=4 noexpandtab nocindent
autocmd BufEnter *.bb       setlocal ts=4 sw=4 sts=4 noexpandtab nocindent
autocmd BufEnter *.bbclass  setlocal ts=4 sw=4 sts=4 noexpandtab nocindent
autocmd BufEnter *.bbappend setlocal ts=4 sw=4 sts=4 noexpandtab nocindent
autocmd BufEnter *.xml      setlocal ts=8 sw=8 sts=8 noexpandtab nocindent
autocmd BufEnter *.java     setlocal ts=4 sw=4 sts=4 expandtab nocindent
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

"====================================================
"= gtags.vim ??정
"====================================================
"nmap <C-F3> :copen<CR>
"nmap <C-F4> :cclose<CR>
"nmap <C-F5> :Gtags<SPACE>
"nmap <C-F6> :Gtags -f %<CR>
"nmap <C-F7> :GtagsCursor<CR>
"nmap <C-F8> :Gozilla<CR>
"nmap <C-n> :cn<CR>
"nmap <C-p> :cp<CR>
"nmap <C-\><C-]> :GtagsCursor<CR>
let g:Gtags_OpenQuickfixWindow = 0
nmap [25~ :copen<CR>			"<S-F3>
nmap [26~ :cclose<CR>         	"<S-F4>
nmap [28~ :Gtags<SPACE>
nmap [29~ :Gtags -f %<CR>     	"<S-F6>
nmap [31~ :GtagsCursor<CR>    	"<S-F7>
nmap [32~ :Gozilla<CR>        	"<S-F8>
nmap <C-n> :cn<CR>
nmap <C-p> :cp<CR>
nmap <C-\><C-]> :GtagsCursor<CR>

"====================================================
"= ??맵??"====================================================
" <F3> ??전 ??의?????동 (SrcExpl ??러그인????정)
" <F4> ??음 ??의?????동 (SrcExpl ??러그인????정)
map ,f v]}zf
map ,c zi
map ,t :po<CR>
map ,g :ta<CR>
map ,s :tags<CR>


"===== tab ??환
map .r gt
map .e gT


map <F1> @q
"nmap <F4> :<Plug>MarkSet
nmap <unique> <F4> <Plug>MarkSet
nmap <F5> :MarkClear<CR> :noh<CR>
"nmap <F5> :MiniBufExplorer<CR>
nmap <F6> :BufExplorer<CR>
"nmap <F6> :BufExplorerVerticalSplit<CR>
"nmap <F6> :BufExplorerHorizontalSplit<CR>
"nmap <F7> :TlistToggle<CR>
nmap <F10> :TagbarToggle<CR>
nmap <F8> :SrcExplToggle<CR>
nmap <F9> :NERDTreeToggle<CR>

"=====  PageUP PageDown
map <PageUp> <C-U><C-U>
map <PageDown> <C-D><C-D>

"===== Vim ??의 ?????기 조절
nmap <s-h> <C-W><
nmap <s-j> <C-W>-
nmap <s-k> <C-W>+
nmap <s-l> <C-W>>

"===== Vim ??에??????????동
nmap <c-h> <c-w>h
nmap <c-j> <c-w>j
nmap <c-k> <c-w>k
nmap <c-l> <c-w>l

"===== 버퍼?????동
map ,r :bn!<CR>	  " Switch to Next File Buffer
map ,e :bp!<CR>	  " Switch to Previous File Buffer
map ,w :bw!<CR>	  " Close Current File Buffer

map ,1 :b!1<CR>	  " Switch to File Buffer #1
map ,2 :b!2<CR>	  " Switch to File Buffer #2
map ,3 :b!3<CR>	  " Switch to File Buffer #3
map ,4 :b!4<CR>	  " Switch to File Buffer #4
map ,5 :b!5<CR>	  " Switch to File Buffer #5
map ,6 :b!6<CR>	  " Switch to File Buffer #6
map ,7 :b!7<CR>	  " Switch to File Buffer #7
map ,8 :b!8<CR>	  " Switch to File Buffer #8
map ,9 :b!9<CR>	  " Switch to File Buffer #9
map ,0 :b!0<CR>	  " Switch to File Buffer #0

"===== gtags.vim
nmap <C-n> :cn<CR>
nmap <C-p> :cp<CR>
nmap <C-\><C-]> :GtagsCursor<CR>
nnoremap <Leader>g <ESC>:Gtags<SPACE>



"===== make bootloader
let startbootdir = getcwd()
func Make1()
	exe "!cd ".startbootdir
	"exe "make tcc8920_evm_emmc -j8"
	exe "make"
endfunc
nmap ,mb :call Make1()<cr><cr>

"===== make kernel
let startkerneldir = getcwd()
func! Make()
	exe "!cd ".startkerneldir
	"exe "make -j12"
	"exe "make -j12;./tcc_mkrd.sh"
	"exe "make -j12;./tcc_initramfs_compress.sh"
	exe "!./mkall.sh -j12 ramdisk"
endfunc
nmap ,mk :call Make()<cr><cr>

"===== hexViewer
let b:hexViewer = 0
func! Hv()
        if (b:hexViewer == 0)
                let b:hexViewer = 1
                exe "%!xxd"
        else
                let b:hexViewer = 0
                exe "%!xxd -r"
        endif
endfunc
nmap ,h :call Hv()<cr>

"===== man
func! Man()
	let sm = expand("<cword>")
	exe "!man -S 2:3:4:5:6:7:8:9:tcl:n:l:p:o ".sm
endfunc
nmap ,ma :call Man()<cr><cr>

"====================================================
"= Source Explorer config
"====================================================

" // Set the height of Source Explorer window
let g:SrcExpl_winHeight = 12
" // Set 100 ms for refreshing the Source Explorer
let g:SrcExpl_refreshTime = 100
" // Set "Enter" key to jump into the exact definition context
let g:SrcExpl_jumpKey = "<ENTER>"
" // Set "Space" key for back from the definition context
let g:SrcExpl_gobackKey = "<SPACE>"

" // In order to avoid conflicts, the Source Explorer should know what plugins
" // except itself are using buffers. And you need add their buffer names into
" // below listaccording to the command ":buffers!"
let g:SrcExpl_pluginList = [
				\ "__Tag_List__",
				\ "NERD_tree_1",
				\ "Source_Explorer",
				\ "[BufExplorer]"
				\ ]

" // Enable/Disable the local definition searching, and note that this is not
" // guaranteed to work, the Source Explorer doesn't check the syntax for now.
" // It only searches for a match with the keyword according to command 'gd'
let g:SrcExpl_searchLocalDef = 1
" // Do not let the Source Explorer update the tags file when opening
let g:SrcExpl_isUpdateTags = 0
" // Use 'Exuberant Ctags' with '--sort=foldcase -R .' or '-L cscope.files' to
" // create/update the tags file
let g:SrcExpl_updateTagsCmd = "ctags --sort=foldcase -R ."
" // Set "<F12>" key for updating the tags file artificially
let g:SrcExpl_updateTagsKey = "<F12>"

" // Set "<F3>" key for displaying the previous definition in the jump list
let g:SrcExpl_prevDefKey = "[13~"
" // Set "<F4>" key for displaying the next definition in the jump list
let g:SrcExpl_nextDefKey = "[14~"




"====================================================
"= Tag List
"====================================================
filetype on "vim filetpye on
let Tlist_Ctags_Cmd="/usr/bin/ctags"
let Tlist_Inc_Winwidth=0
let Tlist_Exit_OnlyWindow=0
"window close=off
let Tlist_Auto_Open=0
let Tlist_Use_Right_Window=0

"====================================================
"= Project config
"====================================================
if filereadable(".project.vimrc")
	source .project.vimrc
endif

"====================================================
"= NERD Tree
"====================================================
"let NERDTreeWinPos="right"
let NERDTreeWinPos="left"
let g:NERDTreeWinSize=25
"let g:NERDTreeWinSize=30
let g:NERDTreeDirArrows=0
function! AutoLoadNERDTree()
	exe 'NERDTree'
endfunction
"autocmd VimEnter * call AutoLoadNERDTree()

"====================================================
"= minibufexpl
"====================================================
let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModSelTarget = 1

"====================================================
"= tags ??정 (cscope, ctags)
"====================================================

"Cscope??????경로 문제?????결??기 ??해??매번 cscope.out??일????로 ??는??
function! LoadCscope()
  exe "silent cs reset"
  let db = findfile("cscope.out", ".;")
  if (!empty(db))
    let path = strpart(db, 0, match(db, "/cscope.out$"))
    set nocscopeverbose " suppress 'duplicate connection' error
    exe "cs add " . db . " " . path
    set cscopeverbose
  endif
endfunction
au BufEnter /* call LoadCscope()

"??재 ??렉??리부??root ??렉??리까?? tags???찾는??
set tags=tags;/


"====================================================
"= Check Symbol
"====================================================
source ~/vimconfig/plugins/checksymbol.vim


"====================================================
"= minibuffer change
"====================================================
"source ~/vimconfig/plugins/minibufferchange.vim

"====================================================
"= my setting
"====================================================
set mouse=a
set magic
"set paste!
set nows
"set cul	" cursor line ??용
autocmd FileType make setlocal noexpandtab "Makefile ??정 중에??TAB ??용
set t_Co=256
set bg=dark
set path+=/root/work/include,/usr/include,/usr/local/include,/usr/src/include
"set path+=./include
set shell=/bin/bash
set hidden
set cursorline

"colorscheme desertEx
"colorscheme badwolf
colorscheme jellybeans

"===== vim grep ??정
"set grepprg=grep\ --color=always\ -n\ $*\ /dev/null
"set makeprg=make\ EXTRA_CFLAGS=-fcolor-diagnostic
"let $grepfile="*.[ch] *.cpp"
"map ,gr :grep --exclude="*svn*" --exclude="cscope.out" --exclude="*tags*" -nRI <cword> *<CR>
"map ,gf :grep --exclude="*svn*" --exclude="cscope.out" --exclude="*tags*" -nRI
map ,gr :!/bin/grep --color=auto --exclude="*svn*" --exclude="cscope.out" --exclude="*tags*" --exclude="*.lst" -nRI <cword> *<CR>
map ,gf :!/bin/grep --color=auto --exclude="*svn*" --exclude="cscope.out" --exclude="*tags*" -nRI

let g:Grep_Skip_Dirs='.svn'
"let g:Grep_Skip_Files = '*~ *,v s.*'
let Grep_Path = '/bin/grep'
let Grep_OpenQuickfixWindow = 1
let Grep_Default_Options = '--exclude="*svn*" --exclude="cscope.out" --exclude="*tags*" --exclude="*.lst" --exclude="*.o.*" --exclude="*.o" --exclude="_.*" -nRI'
"nmap <C-f> :Grep<CR>
nnoremap <silent> <C-g> :Grep<CR>
"map <Leader>r <ESC>:Rgrep <C-R>=expand("<cword>")<CR>
"map <Leader>jj :Grep -R --include=*.java --include=*.xml --include=*.aidl <C-R>=expand("<cword>")<CR>
"map <Leader>jc :Grep -R --include=*.c --include=*.cc --include=*.cpp --include=*.h <C-R>=expand("<cword>")<CR>
"map <C-x><C-x> :GitGrep <C-R>=expand("<cword>")<CR>


nmap <F11> :!make tags cscope gtags -j4<CR>
map [12~ :!ctags -R;mkcscope.sh;gtags<CR>
map <F2> :!ctags -R;mkcscope.sh;gtags<CR>
map ,pa :set paste<CR>		"paste
map ,np :set nopaste<CR>	"nopaste

"nnoremap <C-p> :Unite file_rec/async<cr>

let g:FuzzyFinderOptions = { 'Base':{}, 'Buffer':{}, 'File':{}, 'Dir':{}, 'MruFile':{}, 'MruCmd':{}, 'FavFile':{}, 'Tag':{}, 'TaggedFile':{}}
" ??정 ??일 ??외
let g:FuzzyFinderOptions.File.excluded_path = '\v\~$|\.o$|\.exe$|\.bak$|\.swp$|\.class$|\.settings$|CVS|((^|[/\\])\.[/\\]$)'
" ????문??구분??기 (0 : ????문??구분, 1 : ????문??구분 ??함)
let g:FuzzyFinderOptions.Base.ignore_case = 0

" ??재 ??렉??리 ??하??서 ??일명으???검??해????어??기
"map <Leader>ff <ESC>:FufFile \*\*\/<CR>

" 버퍼 목록??서 검??해????동??기
"map <Leader>fb <ESC>:FufBuffer<CR>


"====================================================
"= ack.vim ??정
"====================================================
let g:ackprg = 'ag --vimgrep'

"====================================================
"= ag.vim ??정
"====================================================
"let g:agprg="ag --nogroup --nocolor --column"
"let g:agprg="ag --nogroup --nocolor --column"
"let g:agprg='--exclude="*svn*" --exclude="cscope.out" --exclude="*tags*" --exclude="*.lst"'
let g:agprg="ag --column"
"let g:agprg="ag --column -i"
"let g:agprg="ag --column --print0"
map <Leader>f <ESC>:AgFile
map <Leader>a <ESC>:Ag <C-R>=expand("<cword>")<CR>
nmap ,o :copen<CR>			"<S-F3>
nmap ,c :cclose<CR>         	"<S-F4>

"====================================================
"= ### Vim + Unite.vim
"====================================================
" You can use pt with [Unite.vim](https://github.com/Shougo/unite.vim).

nnoremap <silent> ,g :<C-u>Unite grep:. -buffer-name=search-buffer<CR>
if executable('pt')
  let g:unite_source_grep_command = 'pt'
  let g:unite_source_grep_default_opts = '--nogroup --nocolor'
  let g:unite_source_grep_recursive_opt = ''
  let g:unite_source_grep_encoding = 'utf-8'
endif



" window
nmap <leader>sw<left>  :topleft  vnew<CR>
nmap <leader>sw<right> :botright vnew<CR>
nmap <leader>sw<up>    :topleft  new<CR>
nmap <leader>sw<down>  :botright new<CR>
" buffer
nmap <leader>s<left>   :leftabove  vnew<CR>
nmap <leader>s<right>  :rightbelow vnew<CR>
nmap <leader>s<up>     :leftabove  new<CR>
nmap <leader>s<down>   :rightbelow new<CR>

" Show quickfix window with full width
botright cwindow


"===================================================
"= function : Remove Trailing whitespace 2016-03-13
"===================================================
"func! DeleteTrailingWS()
	"exe "normal mz"
	"%s/\s\+$//ge
	"exe "normal `z"
"endfunc

"autocmd BufWrite * :call DeleteTrailingWS()
"autocmd BufWritePre * :%s/\s\+$//e


"====================================================
" cscope key map
"====================================================
"s : find this symbol, ctags와 마찬가지로 C심볼을 찾습니다. (변수, 함수, 매크로, 구조체 등)
"g : find this definition, 전역 선언만 검색합니다.
"d : find functions called by this function, 한 함수에 의해 호출되는 또다른 함수들을 찾습니다.
"c : find functions calling this function, 한 함수를 호출하는 모든 함수를 찾습니다.
"t : find assignments to, 텍스트 문자열을 검색
"e : find this egrep pattern, 정규식을 이용하여 소스코드 검색.
"f : find this file, 특정 이름을 포함한 파일을 모두 검색합니다.
"i : find this #including this file, 특정 헤더파일을 포함시키는 모든 소스코드 찾기.


nmap <Leader><Leader>s :cs find s <C-R>=expand("<cword>") <CR><CR>
nmap <Leader><Leader>g :cs find g <C-R>=expand("<cword>") <CR><CR>
nmap <Leader><Leader>d :cs find d <C-R>=expand("<cword>") <CR><CR>
nmap <Leader><Leader>c :cs find c <C-R>=expand("<cword>") <CR><CR>
nmap <Leader><Leader>t :cs find t <C-R>=expand("<cword>") <CR><CR>
nmap <Leader><Leader>e :cs find e <C-R>=expand("<cword>") <CR><CR>
nmap <Leader><Leader>f :cs find f <C-R>=expand("<cword>") <CR><CR>
nmap <Leader><Leader>i :cs find i <C-R>=expand("<cword>") <CR><CR>

