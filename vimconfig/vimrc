"Ï£ºÏùò: Source Explorer??Ï∂©Îèå????Ìïò?????Ìï¥??SrcExpl_pluginList?????Î°ú ??ÏÑ±

"====================================================
"= Bundle
"====================================================
" :BundleList          - list configured bundles
" :BundleInstall(!)    - install(update) bundles
" :BundleSearch(!) foo - search(or refresh cache first) for foo
" :BundleClean(!)      - confirm(or auto-approve) removal of unused bundles
"
" see :h vundle for more details or wiki for FAQ
" NOTE: comments after Bundle command are not allowed..

set nocompatible               " be iMproved
filetype off                   " required!

set rtp+=~/.vim/bundle/vundle
call vundle#rc()

" let Vundle manage Vundle
" required!
Bundle 'gmarik/vundle'

Bundle 'snipMate'
Bundle 'L9'
"Bundle 'FuzzyFinder'
"Bundle 'fugitive.vim'
Bundle 'The-NERD-tree'
Bundle 'taglist.vim'
Bundle 'bufexplorer.zip'
Bundle 'DirDiff.vim'
Bundle 'git://github.com/wesleyche/SrcExpl.git'
Bundle 'SuperTab'
"Bundle 'SuperTab-continued.'
Bundle 'cscope_macros.vim'
Bundle 'gtags.vim'
Bundle 'OmniCppComplete'
Bundle 'armasm'
Bundle 'https://github.com/dhruvasagar/vim-table-mode.git'
"Ï£ºÏÑù??Í∏∞: \cc, \cn, \cs
"??Î•∏Î™®Ïñë Ï£ºÏÑù ??Ï†ï: \ca
"Ï£ºÏÑù??Ï†ú: \<space>
Bundle 'The-NERD-Commenter'
Bundle 'AutoComplPop'
"Bundle 'minibufexpl.vim'
Bundle 'grep.vim'
Bundle 'ack.vim'
Bundle 'git-file.vim'
Bundle 'Tagbar'
Bundle 'lookupfile'
Bundle 'genutils'
"Bundle 'LustyExplorer'
Bundle 'rking/ag.vim'
Bundle 'Find-files'
Bundle 'vim-gitgutter'
"Bundle 'unite.vim'
"Bundle 'ctrlp.vim'

"Plugin 'vim-airline/vim-airline'
"Plugin 'vim-airline/vim-airline-themes'

:filetype plugin indent on     " required!

"====================================================
"= ??ÏÖàÎ∏îÎ¶¨ ??Ïùº??CÏ≤òÎüº ??Ïãù??Ïó¨ Ï£ºÏÑù????Í∏∞ ??Ìïú ??Î¶≠
"====================================================
au BufRead,BufNewFile *.S		set ft=c

"====================================================
"= Í∏∞Î≥∏ ??Ï†ï
"====================================================
set cindent			"??Ïó¨??Í∏∞ ??Ï†ï
set ruler			" ??Î©¥ ??Ï∏° ??Îã®????Ïû¨ Ïª§ÏÑú????Ïπò(?????????Î≥¥Ïó¨Ï§Ä??
set number			" Ï§ÑÎ≤à??Ï∂úÎ†•
set modifiable
set hlsearch			" Highlight Search
set showmatch			" ÏùºÏπòÌïòÎäî Í¥ÑÌò∏ ÌïòÏù¥ÎùºÌåÖ
set ts=8			" tab stop - tab ??Í∏∞
set sw=8			" shift width - shift ??Í∏∞ Ï°∞Ï†à
set sts=8			" soft tab stop - tab ??Îèô ??Í∏∞
set noexpandtab
set incsearch
set printoptions=portrait:n,wrap:n,duplex:off
set fileencodings=utf-8,euc-kr
set gfn=??ÎàîÍ≥†ÎîïÏΩîÎî©\ 12	" gvim????Ìä∏ ??Ï†ï
"colorscheme desert


"==========================
"= vim-airline
"==========================
let g:airline#extensions#tabline#enabled = 1 " turn on buffer list
let g:airline_theme='hybrid'
set laststatus=2 " turn on bottom bar


"==========================
"= vim-gitgutter
"==========================

set updatetime=100
let g:gitgutter_realtime = 1
let g:gitgutter_eager = 1
let g:gitgutter_override_sign_column_highlight = 0

"highlight SignColumn ctermbg=whatever    " terminal Vim
highlight SignColumn guibg=whatever      " gVim/MacVim

let g:gitgutter_sign_column_always = 1
let g:gitgutter_max_signs = 500  " default value

"nmap ]h <Plug>GitGutterNextHunk
"nmap [h <Plug>GitGutterPrevHunk
"nmap <Leader>ha <Plug>GitGutterStageHunk
"nmap <Leader>hr :GitGutterUndoHunk<CR>
"nmap <Leader>hv <Plug>GitGutterPreviewHunk
nmap <Leader>ht :GitGutterLineHighlightsToggle<CR>


"GitGutterAdd          " an added line
"GitGutterChange       " a changed line
"GitGutterDelete       " at least one removed line
"GitGutterChangeDelete " a changed line followed by at least one removed line

let g:gitgutter_sign_added = '+'
let g:gitgutter_sign_modified = 'm'
let g:gitgutter_sign_removed = '-'
let g:gitgutter_sign_removed_first_line = '^^'
let g:gitgutter_sign_modified_removed = 'ww'

"GitGutterAddLine          " default: links to DiffAdd
"GitGutterChangeLine       " default: links to DiffChange
"GitGutterDeleteLine       " default: links to DiffDelete
"GitGutterChangeDeleteLine " default: links to GitGutterChangeLineDefault, i.e. DiffChange

"The base of the diff
"By default buffers are diffed against the index. However you can diff against any commit by setting:
let g:gitgutter_diff_base = '<commit SHA>'

"Extra arguments for git diff
"If you want to pass extra arguments to git diff, for example to ignore whitespace, do so like this:
"let g:gitgutter_diff_args = '-w'

"Key mappings
"To disable all key mappings:
let g:gitgutter_map_keys = 1

" Default:
let g:gitgutter_grep_command = 'grep --color=never -e'

"To turn off vim-gitgutter by default
let g:gitgutter_enabled = 1
"To turn off signs by default
let g:gitgutter_signs = 1
"To turn on line highlighting by default
let g:gitgutter_highlight_lines = 0
"To turn off asynchronous updates
let g:gitgutter_async = 1




"==========================
"= autocmd
"==========================
autocmd BufEnter *.c        setlocal ts=8 sw=8 sts=8 noexpandtab
autocmd BufEnter *.S        setlocal ts=8 sw=8 sts=8 noexpandtab
autocmd BufEnter *.py       setlocal ts=8 sw=8 sts=8 noexpandtab
autocmd BufEnter Makefile   setlocal ts=8 sw=8 sts=8 noexpandtab
autocmd BufEnter .*         setlocal ts=8 sw=8 sts=8 noexpandtab nocindent
autocmd BufEnter *.dtsi     setlocal ts=8 sw=8 sts=8 noexpandtab nocindent
autocmd BufEnter *.dts      setlocal ts=8 sw=8 sts=8 noexpandtab nocindent
autocmd BufEnter *.md       setlocal ts=8 sw=8 sts=8 noexpandtab nocindent
autocmd BufEnter *.sh       setlocal ts=8 sw=8 sts=8 noexpandtab nocindent
autocmd BufEnter *defconfig setlocal ts=4 sw=4 sts=4 noexpandtab nocindent
autocmd BufEnter *.bb       setlocal ts=8 sw=8 sts=8 noexpandtab nocindent
autocmd BufEnter *.bbclass  setlocal ts=8 sw=8 sts=8 noexpandtab nocindent
autocmd BufEnter *.bbappend setlocal ts=8 sw=8 sts=8 noexpandtab nocindent
autocmd BufEnter *.xml      setlocal ts=8 sw=8 sts=8 noexpandtab nocindent
autocmd BufEnter *.java     setlocal ts=4 sw=4 sts=4 expandtab nocindent
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

"====================================================
"= gtags.vim ??Ï†ï
"====================================================
"nmap <C-F3> :copen<CR>
"nmap <C-F4> :cclose<CR>
"nmap <C-F5> :Gtags<SPACE>
"nmap <C-F6> :Gtags -f %<CR>
"nmap <C-F7> :GtagsCursor<CR>
"nmap <C-F8> :Gozilla<CR>
"nmap <C-n> :cn<CR>
"nmap <C-p> :cp<CR>
"nmap <C-\><C-]> :GtagsCursor<CR>
let g:Gtags_OpenQuickfixWindow = 0
nmap [25~ :copen<CR>			"<S-F3>
nmap [26~ :cclose<CR>         	"<S-F4>
nmap [28~ :Gtags<SPACE>
nmap [29~ :Gtags -f %<CR>     	"<S-F6>
nmap [31~ :GtagsCursor<CR>    	"<S-F7>
nmap [32~ :Gozilla<CR>        	"<S-F8>
nmap <C-n> :cn<CR>
nmap <C-p> :cp<CR>
nmap <C-\><C-]> :GtagsCursor<CR>

"====================================================
"= ??Îßµ??"====================================================
" <F3> ??Ï†Ñ ??Ïùò?????Îèô (SrcExpl ??Îü¨Í∑∏Ïù∏????Ï†ï)
" <F4> ??Ïùå ??Ïùò?????Îèô (SrcExpl ??Îü¨Í∑∏Ïù∏????Ï†ï)
map ,f v]}zf
map ,c zi
map ,t :po<CR>
map ,g :ta<CR>
map ,s :tags<CR>


"===== tab ??Ìôò
map .r gt
map .e gT


"nmap <F5> :MiniBufExplorer<CR>
nmap <F6> :BufExplorer<CR>
"nmap <F6> :BufExplorerVerticalSplit<CR>
"nmap <F6> :BufExplorerHorizontalSplit<CR>
"nmap <F7> :TlistToggle<CR>
nmap <F7> :TagbarToggle<CR>
nmap <F8> :SrcExplToggle<CR>
nmap <F9> :NERDTreeToggle<CR>

"=====  PageUP PageDown
map <PageUp> <C-U><C-U>
map <PageDown> <C-D><C-D>

"===== Vim ??Ïùò ?????Í∏∞ Ï°∞Ï†à
nmap <s-h> <C-W><
nmap <s-j> <C-W>-
nmap <s-k> <C-W>+
nmap <s-l> <C-W>>

"===== Vim ??Ïóê??????????Îèô
nmap <c-h> <c-w>h
nmap <c-j> <c-w>j
nmap <c-k> <c-w>k
nmap <c-l> <c-w>l

"===== Î≤ÑÌçº?????Îèô
map ,r :bn!<CR>	  " Switch to Next File Buffer
map ,e :bp!<CR>	  " Switch to Previous File Buffer
map ,w :bw!<CR>	  " Close Current File Buffer

map ,1 :b!1<CR>	  " Switch to File Buffer #1
map ,2 :b!2<CR>	  " Switch to File Buffer #2
map ,3 :b!3<CR>	  " Switch to File Buffer #3
map ,4 :b!4<CR>	  " Switch to File Buffer #4
map ,5 :b!5<CR>	  " Switch to File Buffer #5
map ,6 :b!6<CR>	  " Switch to File Buffer #6
map ,7 :b!7<CR>	  " Switch to File Buffer #7
map ,8 :b!8<CR>	  " Switch to File Buffer #8
map ,9 :b!9<CR>	  " Switch to File Buffer #9
map ,0 :b!0<CR>	  " Switch to File Buffer #0

"===== gtags.vim
nmap <C-n> :cn<CR>
nmap <C-p> :cp<CR>
nmap <C-\><C-]> :GtagsCursor<CR>
nnoremap <Leader>g <ESC>:Gtags<SPACE>



"===== make bootloader
let startbootdir = getcwd()
func Make1()
	exe "!cd ".startbootdir
	"exe "make tcc8920_evm_emmc -j8"
	exe "make"
endfunc
nmap ,mb :call Make1()<cr><cr>

"===== make kernel
let startkerneldir = getcwd()
func! Make()
	exe "!cd ".startkerneldir
	"exe "make -j12"
	"exe "make -j12;./tcc_mkrd.sh"
	"exe "make -j12;./tcc_initramfs_compress.sh"
	exe "!./mkall.sh -j12 ramdisk"
endfunc
nmap ,mk :call Make()<cr><cr>

"===== hexViewer
let b:hexViewer = 0
func! Hv()
        if (b:hexViewer == 0)
                let b:hexViewer = 1
                exe "%!xxd"
        else
                let b:hexViewer = 0
                exe "%!xxd -r"
        endif
endfunc
nmap ,h :call Hv()<cr>

"===== man
func! Man()
	let sm = expand("<cword>")
	exe "!man -S 2:3:4:5:6:7:8:9:tcl:n:l:p:o ".sm
endfunc
nmap ,ma :call Man()<cr><cr>

"====================================================
"= Source Explorer config
"====================================================

" // Set the height of Source Explorer window
let g:SrcExpl_winHeight = 12
" // Set 100 ms for refreshing the Source Explorer
let g:SrcExpl_refreshTime = 100
" // Set "Enter" key to jump into the exact definition context
let g:SrcExpl_jumpKey = "<ENTER>"
" // Set "Space" key for back from the definition context
let g:SrcExpl_gobackKey = "<SPACE>"

" // In order to avoid conflicts, the Source Explorer should know what plugins
" // except itself are using buffers. And you need add their buffer names into
" // below listaccording to the command ":buffers!"
let g:SrcExpl_pluginList = [
				\ "__Tag_List__",
				\ "NERD_tree_1",
				\ "Source_Explorer",
				\ "[BufExplorer]"
				\ ]

" // Enable/Disable the local definition searching, and note that this is not
" // guaranteed to work, the Source Explorer doesn't check the syntax for now.
" // It only searches for a match with the keyword according to command 'gd'
let g:SrcExpl_searchLocalDef = 1
" // Do not let the Source Explorer update the tags file when opening
let g:SrcExpl_isUpdateTags = 0
" // Use 'Exuberant Ctags' with '--sort=foldcase -R .' or '-L cscope.files' to
" // create/update the tags file
let g:SrcExpl_updateTagsCmd = "ctags --sort=foldcase -R ."
" // Set "<F12>" key for updating the tags file artificially
let g:SrcExpl_updateTagsKey = "<F12>"

" // Set "<F3>" key for displaying the previous definition in the jump list
let g:SrcExpl_prevDefKey = "[13~"
" // Set "<F4>" key for displaying the next definition in the jump list
let g:SrcExpl_nextDefKey = "[14~"




"====================================================
"= Tag List
"====================================================
filetype on "vim filetpye on
let Tlist_Ctags_Cmd="/usr/bin/ctags"
let Tlist_Inc_Winwidth=0
let Tlist_Exit_OnlyWindow=0
"window close=off
let Tlist_Auto_Open=0
let Tlist_Use_Right_Window=0

"====================================================
"= Project config
"====================================================
if filereadable(".project.vimrc")
	source .project.vimrc
endif

"====================================================
"= NERD Tree
"====================================================
"let NERDTreeWinPos="right"
let NERDTreeWinPos="left"
let g:NERDTreeWinSize=25
"let g:NERDTreeWinSize=30
let g:NERDTreeDirArrows=0
function! AutoLoadNERDTree()
	exe 'NERDTree'
endfunction
"autocmd VimEnter * call AutoLoadNERDTree()

"====================================================
"= minibufexpl
"====================================================
let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModSelTarget = 1

"====================================================
"= tags ??Ï†ï (cscope, ctags)
"====================================================

"Cscope??????Í≤ΩÎ°ú Î¨∏Ï†ú?????Í≤∞??Í∏∞ ??Ìï¥??Îß§Î≤à cscope.out??Ïùº????Î°ú ??Îäî??
function! LoadCscope()
  exe "silent cs reset"
  let db = findfile("cscope.out", ".;")
  if (!empty(db))
    let path = strpart(db, 0, match(db, "/cscope.out$"))
    set nocscopeverbose " suppress 'duplicate connection' error
    exe "cs add " . db . " " . path
    set cscopeverbose
  endif
endfunction
au BufEnter /* call LoadCscope()

"??Ïû¨ ??Î†â??Î¶¨Î∂Ä??root ??Î†â??Î¶¨Íπå?? tags???Ï∞æÎäî??
set tags=tags;/


"====================================================
"= Check Symbol
"====================================================
source ~/vimconfig/plugins/checksymbol.vim


"====================================================
"= minibuffer change
"====================================================
source ~/vimconfig/plugins/minibufferchange.vim

"====================================================
"= my setting
"====================================================
set mouse=a
set magic
"set paste!
set nows
"set cul	" cursor line ??Ïö©
autocmd FileType make setlocal noexpandtab "Makefile ??Ï†ï Ï§ëÏóê??TAB ??Ïö©
set laststatus=2
set t_Co=256
set bg=dark
set path+=/root/work/include,/usr/include,/usr/local/include,/usr/src/include
"set path+=./include
set shell=/bin/bash
set hidden
set cursorline

syntax enable
"colorscheme desertEx
"colorscheme badwolf
colorscheme jellybeans

"===== vim grep ??Ï†ï
"set grepprg=grep\ --color=always\ -n\ $*\ /dev/null
"set makeprg=make\ EXTRA_CFLAGS=-fcolor-diagnostic
"let $grepfile="*.[ch] *.cpp"
"map ,gr :grep --exclude="*svn*" --exclude="cscope.out" --exclude="*tags*" -nRI <cword> *<CR>
"map ,gf :grep --exclude="*svn*" --exclude="cscope.out" --exclude="*tags*" -nRI
map ,gr :!/bin/grep --color=auto --exclude="*svn*" --exclude="cscope.out" --exclude="*tags*" --exclude="*.lst" -nRI <cword> *<CR>
map ,gf :!/bin/grep --color=auto --exclude="*svn*" --exclude="cscope.out" --exclude="*tags*" -nRI

let g:Grep_Skip_Dirs='.svn'
let Grep_Path = '/bin/grep'
let Grep_OpenQuickfixWindow = 1
let Grep_Default_Options = '--exclude="*svn*" --exclude="cscope.out" --exclude="*tags*" --exclude="*.lst" -nRI'
"nmap <C-f> :Grep<CR>
nnoremap <silent> <C-g> :Grep<CR>
map <Leader>r <ESC>:Rgrep <C-R>=expand("<cword>")<CR>
map <Leader>jj :Grep -R --include=*.java --include=*.xml --include=*.aidl <C-R>=expand("<cword>")<CR>
map <Leader>jc :Grep -R --include=*.c --include=*.cc --include=*.cpp --include=*.h <C-R>=expand("<cword>")<CR>
"map <C-x><C-x> :GitGrep <C-R>=expand("<cword>")<CR>

fu Header_Path_Set(var)
	let &path = a:var . '/include,' . &path
	let sym = "CONFIG_ARCH_TCC89"
	if sym =~# '^CONFIG_'
		let config = findfile(".config", ".;")
		if config != ""
			let hit = 0
			for line in readfile(config, '')
				let str = strpart(line, 0, 17)
				if str =~# sym
					echo line
					let part = strpart(line, 0, 19)
					let hit += 1
					if part =~ "CONFIG_ARCH_TCC8900"
						let temp = a:var . '/arch/arm/mach-tcc8900/include,'
						echo temp
						let &path = temp . &path
						let temp = a:var . '/arch/arm/include,'
						echo temp
						let &path = temp . &path
					endif
					if part =~ "CONFIG_ARCH_TCC892X"
						let temp = a:var . '/arch/arm/mach-tcc892x/include,'
						echo temp
						let &path = temp . &path
						let temp = a:var . '/arch/arm/include,'
						echo temp
						let &path = temp . &path
					endif
					if part =~ "CONFIG_ARCH_TCC893X"
						let temp = a:var . '/arch/arm/mach-tcc893x/include,'
						echo temp
						let &path = temp . &path
						let temp = a:var . '/arch/arm/include,'
						echo temp
						let &path = temp . &path
					endif
					if part =~ "CONFIG_ARCH_TCC896X"
						let temp = a:var . '/arch/arm/mach-tcc896x/include,'
						echo temp
						let &path = temp . &path
						let temp = a:var . '/arch/arm/include,'
						echo temp
						let &path = temp . &path
					endif
					if part =~ "CONFIG_ARCH_TCC897X"
						let temp = a:var . '/arch/arm/mach-tcc897x/include,'
						echo temp
						let &path = temp . &path
						let temp = a:var . '/arch/arm/include,'
						echo temp
						let &path = temp . &path
					endif
					break
				endif
			endfo
			if hit == 0 | echo "# " . sym . " not found" | endif
		else
			echo "config file not found"
		endif
	else
       "         if sym =~? '^\(#\|=\)\?\([0-9]\+\|0x[0-9a-f]\+\)$'
			"if sym =~ '^\(=\|#\)' | let sym = sym[1:] | endif
			"echo NumFmt(sym)
		"endif
	endif
endfu

nmap <F10> :call Header_Path_Set(getcwd())<CR>
nmap <F11> :!make tags cscope gtags -j4<CR>
map [12~ :!ctags -R;mkcscope.sh;gtags<CR>
map <F2> :!ctags -R;mkcscope.sh;gtags<CR>
map ,pa :set paste<CR>		"paste
map ,np :set nopaste<CR>	"nopaste

"nnoremap <C-p> :Unite file_rec/async<cr>

let g:FuzzyFinderOptions = { 'Base':{}, 'Buffer':{}, 'File':{}, 'Dir':{}, 'MruFile':{}, 'MruCmd':{}, 'FavFile':{}, 'Tag':{}, 'TaggedFile':{}}
" ??Ï†ï ??Ïùº ??Ïô∏
let g:FuzzyFinderOptions.File.excluded_path = '\v\~$|\.o$|\.exe$|\.bak$|\.swp$|\.class$|\.settings$|CVS|((^|[/\\])\.[/\\]$)'
" ????Î¨∏??Íµ¨Î∂Ñ??Í∏∞ (0 : ????Î¨∏??Íµ¨Î∂Ñ, 1 : ????Î¨∏??Íµ¨Î∂Ñ ??Ìï®)
let g:FuzzyFinderOptions.Base.ignore_case = 0

" ??Ïû¨ ??Î†â??Î¶¨ ??Ìïò??ÏÑú ??ÏùºÎ™ÖÏúº???Í≤Ä??Ìï¥????Ïñ¥??Í∏∞
"map <Leader>ff <ESC>:FufFile \*\*\/<CR>

" Î≤ÑÌçº Î™©Î°ù??ÏÑú Í≤Ä??Ìï¥????Îèô??Í∏∞
"map <Leader>fb <ESC>:FufBuffer<CR>


"====================================================
"= ack.vim ??Ï†ï
"====================================================
let g:ackprg = 'ag --vimgrep'

"====================================================
"= ag.vim ??Ï†ï
"====================================================
"let g:agprg="ag --nogroup --nocolor --column"
"let g:agprg="ag --nogroup --nocolor --column"
"let g:agprg='--exclude="*svn*" --exclude="cscope.out" --exclude="*tags*" --exclude="*.lst"'
let g:agprg="ag --column"
"let g:agprg="ag --column -i"
"let g:agprg="ag --column --print0"
map <Leader>f <ESC>:AgFile
map <Leader>a <ESC>:Ag <C-R>=expand("<cword>")<CR>
nmap ,o :copen<CR>			"<S-F3>
nmap ,c :cclose<CR>         	"<S-F4>

"====================================================
"= ### Vim + Unite.vim
"====================================================
" You can use pt with [Unite.vim](https://github.com/Shougo/unite.vim).

nnoremap <silent> ,g :<C-u>Unite grep:. -buffer-name=search-buffer<CR>
if executable('pt')
  let g:unite_source_grep_command = 'pt'
  let g:unite_source_grep_default_opts = '--nogroup --nocolor'
  let g:unite_source_grep_recursive_opt = ''
  let g:unite_source_grep_encoding = 'utf-8'
endif



" window
nmap <leader>sw<left>  :topleft  vnew<CR>
nmap <leader>sw<right> :botright vnew<CR>
nmap <leader>sw<up>    :topleft  new<CR>
nmap <leader>sw<down>  :botright new<CR>
" buffer
nmap <leader>s<left>   :leftabove  vnew<CR>
nmap <leader>s<right>  :rightbelow vnew<CR>
nmap <leader>s<up>     :leftabove  new<CR>
nmap <leader>s<down>   :rightbelow new<CR>

" Show quickfix window with full width
botright cwindow


"==========================
"= function : Remove Trailing whitespace 2016-03-13
"==========================
"func! DeleteTrailingWS()
	"exe "normal mz"
	"%s/\s\+$//ge
	"exe "normal `z"
"endfunc

"autocmd BufWrite * :call DeleteTrailingWS()
"autocmd BufWritePre * :%s/\s\+$//e

